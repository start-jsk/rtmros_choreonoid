<launch>
  <arg name="SIMULATOR_NAME" default="CHIDORI(Robot)0" />
  <arg name="OUTPUT" default="log"/>
  <arg name="nameserver" default="localhost" />
  <arg name="corbaport" default="15005" />
  <arg name="managerport" default="2810" />
  <arg name="periodic_rate" default="200" />

  <arg name="openrtm_args" default='-o "corba.master_manager:$(arg nameserver):$(arg managerport)" -o "corba.nameservers:$(arg nameserver):$(arg corbaport)" -o "naming.formats:%n.rtc" -o "exec_cxt.periodic.type:PeriodicExecutionContext" -o "exec_cxt.periodic.rate:$(arg periodic_rate)" -o "logger.file_name:/tmp/rtc%p.log"' />

  <env name="RTCTREE_NAMESERVERS" value="$(arg nameserver):$(arg corbaport)" />
  <env name="LANG" value="C" />
  <env name="ORBgiopMaxMsgSize" value="2147483648" />
  <env name="RTC_CONNECTION_CHECK_ONCE" value="true" />

  <node name="rtmlaunch_vision_connect" pkg="openrtm_tools"
        type="rtmlaunch.py"
        args="$(find hrpsys_choreonoid_tutorials)/launch/chidori_vision_connect.launch"
        output="$(arg OUTPUT)"/>

  <!--node pkg="hrpsys" name="camview" type="CameraImageViewerComp"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" >
    <rtconnect from="JAXON_RED(Robot)0.rtc:CHEST_CAMERA"
               to="CameraImageViewer0.rtc:imageIn" />
    <rtactivate component="CameraImageViewer0.rtc" />
  </node-->

  <!-- RANGE SENSOR -->
  <node pkg="hrpsys_ros_bridge" name="RANGESENSOR"
        type="RangeSensorROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" ns="multisense">
    <param name="frame_id" value="head_hokuyo_frame" />
    <param name="intensity" value="1000" />
    <remap from="range" to="lidar_scan" />
    <rtconnect from="CHIDORI(Robot)0.rtc:HEAD_RANGE"
               to="RANGESENSOR.rtc:range" />
    <rtactivate component="RANGESENSOR.rtc" />
  </node>
  <node name="head_range_frame_id" pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 /HEAD_RANGE head_hokuyo_frame 20" />
  <!-- settings for tilt laser joint -->
  <node pkg="hrpsys_choreonoid" name="jstate_bridge"
        type="JointStateROSBridge" ns="multisense_local"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" >
    <rosparam param="names">
      ["tilt_laser_joint"]
    </rosparam>
    <param name="rate" value="100.0" />
    <rtconnect from="CHIDORI(Robot)0.rtc:headq"
               to="JointStateROSBridge0.rtc:qRef" />
    <rtactivate component="JointStateROSBridge0.rtc" />
  </node>
  <!-- RANGE SENSOR ends -->


  <!-- FOOT RGB CAMERA -->
  <!-- connect openRTM to ROS (FOOT CAMERA) -->
  <node pkg="hrpsys_ros_bridge" name="FOOTCAMERA"
        type="ImageSensorROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" ns="camera2">
    <param name="frame_id" value="camera2_rgb_optical_frame" />
    <rosparam param="camera_param_K">[240, 0, 319.5,  0, 240, 239.5,  0, 0, 1]</rosparam>
    <rosparam param="camera_param_P">[240, 0, 319.5, 0,  0, 240, 239.5, 0,  0, 0, 1, 0]</rosparam>
    <rtconnect from="CHIDORI(Robot)0.rtc:FOOT_CAMERA"
               to="FOOTCAMERA.rtc:timedImage" />
    <rtactivate component="FOOTCAMERA.rtc" />
    <remap from="image_raw" to="image_rect_color" />
  </node>
  <!-- make camera optical frame -->
  <node name="foot_camera_frame_id" pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 /FOOT_CAMERA camera2_rgb_optical_frame 20" />
  <!-- replace topic name to names which openni2 launch pulishes -->
  <node name="camera1_image_rect_relay"
        pkg="topic_tools" type="relay"
        args="/camera1/image_rect_color /camera1/rgb/image_rect_color" />
  <!-- FOOT RGB CAMERA ends-->

  <!-- FORWARD RGB CAMERA -->
  <node pkg="hrpsys_ros_bridge" name="FORWARDCAMERA"
        type="ImageSensorROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" ns="camera1">
    <param name="frame_id" value="camera1_rgb_optical_frame" />
    <rosparam param="camera_param_K">[240, 0, 319.5,  0, 240, 239.5,  0, 0, 1]</rosparam>
    <rosparam param="camera_param_P">[240, 0, 319.5, -16.8,  0, 240, 239.5, 0,  0, 0, 1, 0]</rosparam>
    <rtconnect from="CHIDORI(Robot)0.rtc:FORWARD_CAMERA"
               to="FORWARDCAMERA.rtc:timedImage" />
    <rtactivate component="FORWARDCAMERA.rtc" />
    <remap from="image_raw" to="image_rect_color" />
  </node>
  <node name="forward_camera_frame_id" pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 /FORWARD_CAMERA camera1_rgb_optical_frame 20" />
  <node name="camera2_image_rect_relay"
        pkg="topic_tools" type="relay"
        args="/camera2/image_rect_color /camera2/rgb/image_rect_color" />
  <!-- FORWARD RGB CAMERA ends -->

  <!-- FOOT DEPTH CAMERA -->
  <node pkg="hrpsys_ros_bridge" name="FOOTDEPTH"
        type="PointCloudROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" ns="camera1">
    <param name="frame_id" value="camera2_depth_optical_frame" />
    <param name="publish_depth" value="true" />
    <param name="transformed_camera_frame" value="true" />
    <remap from="points" to="depth_registered/points" />
    <rtconnect from="CHIDORI(Robot)0.rtc:FOOT_DEPTH"
               to="FOOTDEPTH.rtc:points" />
    <rtactivate component="FOOTDEPTH.rtc" />
  </node>
  <!-- <node name="multisense_organized_image_points2_relay" -->
  <!--       pkg="topic_tools" type="relay" -->
  <!--       args="multisense_local/organized_image_points2_color multisense_local/organized_image_points2" /> -->
  <!-- <node name="multisense_image_points2_color_relay" -->
  <!--       pkg="topic_tools" type="relay" -->
  <!--       args="multisense_local/organized_image_points2_color multisense_local/image_points2_color" /> -->
  <node name="foot_depth_frame_id" pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 /FOOT_DEPTH camera2_depth_optical_frame 20" />
  <!-- FOOT DEPTH CAMERA ends -->

  <!-- FORWARD DEPTH CAMERA -->
  <node pkg="hrpsys_ros_bridge" name="FORWARDDEPTH"
        type="PointCloudROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" ns="camera2">
    <param name="frame_id" value="camera1_depth_optical_frame" />
    <param name="publish_depth" value="true" />
    <param name="transformed_camera_frame" value="true" />
    <remap from="points" to="depth_registered/points" />
    <rtconnect from="CHIDORI(Robot)0.rtc:FORWARD_DEPTH"
               to="FORWARDDEPTH.rtc:points" />
    <rtactivate component="FORWARDDEPTH.rtc" />
  </node>
  <!-- <node name="multisense_organized_image_points2_relay" -->
  <!--       pkg="topic_tools" type="relay" -->
  <!--       args="multisense_local/organized_image_points2_color multisense_local/organized_image_points2" /> -->
  <!-- <node name="multisense_image_points2_color_relay" -->
  <!--       pkg="topic_tools" type="relay" -->
  <!--       args="multisense_local/organized_image_points2_color multisense_local/image_points2_color" /> -->
  <node name="forward_depth_frame_id" pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 /FORWARD_DEPTH camera1_depth_optical_frame 20" />
  <!-- FORWARD DEPTH CAMERA ends -->

  <node pkg="hrpsys_choreonoid" name="ground_truth_bridge"
        type="TransformROSBridge"
        output="$(arg OUTPUT)" args="$(arg openrtm_args)" >
    <!-- set rtc name by ros_name -->
    <param name="use_ros_name" value="true" />

    <remap from="odom" to="/ground_truth_odom" />
    <param name="rate" value="100.0" />
    <param name="publish_odom" value="true" />
    <param name="initial_relative" value="false" />

    <param name="publish_tf" value="true" />
    <param name="invert_tf"  value="true" />
    <param name="tf_frame"        value="BODY" />
    <param name="tf_parent_frame" value="choreonoid_origin" />

    <rtconnect from="CHIDORI(Robot)0.rtc:WAIST"
               to="ground_truth_bridge.rtc:TformIn" />
    <rtactivate component="ground_truth_bridge.rtc" />
  </node>

</launch>
